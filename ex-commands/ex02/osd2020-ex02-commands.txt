1. Use Environment Variables and ConfigMaps
1.1. Create Project
oc new-project $GUID-env
oc new-app https://github.com/redhat-gpte-devopsautomation/PrintEnv
oc expose svc printenv
curl $(oc get route printenv --template='{{ .spec.host }}') | jq . -S
1.2. Use Environment Variables
oc set env dc/printenv APP_VAR_1=Value1 APP_VAR_2=Value2
watch oc get pod
curl $(oc get route printenv --template='{{ .spec.host }}') | jq . -S | grep APP
oc set env dc/printenv APP_VAR_2-
1.3. Create and Update ConfigMap
configmap printenv-config --from-literal=APP_VAR_3=Value3 --from-literal=APP_VAR_4=Value4
oc edit dc printenv
1.4. Return Environment as Text File
oc set env dc/printenv READ_FROM_FILE=/data/configfile.txt
echo "This is a very important Config File" > configfile.txt
oc create configmap printenv-config-file --from-file=configfile.txt
oc set volume dc/printenv --add --overwrite --name=config-volume -m /data/ -t configmap --configmap-name=printenv-config-file
oc get pods
oc rsh printenv-6-n8zj6
sh-4.2$ ls /data/configfile.txt
sh-4.2$ cat /data/configfile.txt


2. Add Secrets
2.1. Add Secret Using Environment Variables
echo 'r3dh4t1!' > ./password.txt
echo 'admin' > ./user.txt
oc create secret generic printenv-secret --from-file=app_user=user.txt --from-file=app_password=password.txt
oc describe secrets printenv-secret
oc get secret printenv-secret -o yaml
echo "cjNkaDR0MSEK" | base64 --decode
echo "YWRtaW4K" | base64 --decode
oc set env dc/printenv --from=secret/printenv-secret
oc set env dc/printenv --list
oc set env dc/printenv --from=secret/printenv-secret --prefix=MYSQL_
oc set env dc/printenv --list
2.2. Add Secret Using Volume Mount
echo 'r3dh4t1!' > ./dbpassword.txt
echo 'admin' > ./dbuser.txt
echo 'http://postgresql:5432' > ./dburl.txt
oc create secret generic printenv-db-secret --from-file=app_db_user=user.txt --from-file=app_db_password=password.txt --from-file=app_db_url=dburl.txt
oc set volume dc/printenv --add --overwrite --name=db-config-volume -m /dbconfig/ --secret-name=printenv-db-secret
oc set env dc/printenv READ_FROM_FILE=/dbconfig/app_db_url
curl $(oc get route printenv --template='{{ .spec.host }}')


3. Use ConfigMaps with Gogs Application
3.1. Set Up Project and Database and Install Gogs
oc new-project $GUID-gogs --display-name "Shared Gogs"
oc new-app postgresql-persistent --param POSTGRESQL_DATABASE=gogs --param POSTGRESQL_USER=gogs --param POSTGRESQL_PASSWORD=gogs --param VOLUME_CAPACITY=4Gi -lapp=postgresql_gogs
oc new-app quay.io/gpte-devops-automation/gogs:11.91 -lapp=gogs
oc set volume dc/gogs --add --overwrite --name=gogs-volume-1 --type persistentVolumeClaim --claim-size=4G --claim-name=gogs-data
oc expose svc gogs
oc get route gogs
3.2. Make Gogs Pod Resilient to Restarts
oc exec $(oc get pod | grep "^gogs" | grep Running | awk '{print $1}') -- cat /opt/gogs/custom/conf/app.ini | more
oc cp $(oc get pod | grep "^gogs" | grep Running | awk '{print $1}'):opt/gogs/custom/conf/app.ini $HOME/app.ini
oc create configmap gogs --from-file=app.ini
oc set volume dc/gogs --add --overwrite --name=config-volume -m /opt/gogs/custom/conf/ -t configmap --configmap-name=gogs
rm -f app.ini
oc delete project $GUID-env
oc delete project $GUID-gogs


4. Use Downward API
4.1. Prepare Project
oc new-project $GUID-development
oc new-app https://github.com/redhat-gpte-devopsautomation/PrintEnv
oc expose svc printenv
oc get route printenv -o jsonpath='{.spec.host}{"\n"}'
curl $(oc get route printenv --template='{{.spec.host}}') | jq . -S
4.2. Set and Display Configuration Data
oc edit dc/printenv
curl $(oc get route printenv --template='{{.spec.host}}') | jq . -S | grep POD
4.3 Set and Display Configuration Data Using Volume Mount
oc edit dc/printenv
oc rsh $( oc get pod | grep printenv | grep Running | awk '{ print $1 }' ) cat /downward/pod_labels
oc rsh $( oc get pod | grep printenv | grep Running | awk '{ print $1 }' ) cat /downward/pod_annotations
4.4. Clean Up Environment
oc delete project $GUID-development