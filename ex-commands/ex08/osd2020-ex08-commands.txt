=====================================
Part 1: Deploying an example health application
=====================================

2.	Create a project by running the following command:
oc new-project example-health

3.	Create the example-heath application by running the following command:
oc new-app --name patient-ui https://github.com/IBM-SkillsAcademy/OpenShiftDevOps2020 --context-dir=node-s2i-openshift

4.	Expose the service by running the following command:
oc expose svc/patient-ui

5.	Get the route URL by running the following command:
oc get route | grep patient-ui | awk '{print $2}'

6.	Review all the created OpenShift objects 
oc get all


=====================================
Part 2:	Using OpenShift built-in logging and monitoring
=====================================
1.	Open the example-heath project by running the following command:
oc project example-health

2.	Initiate a curl loop 
route=$(oc get route | grep patient-ui | awk '{print $2}')
while sleep 1; do curl -s http://$route/info; done

3.	View logs that are generated by the cURL loop
pod=$(oc get pod | grep Running | awk '{print $1}')
oc logs -f $pod

5.	Get the events
oc get events


=====================================
Part 3 Using Red Hat OpenShift built in metrics dashboards
=====================================
*
* Follow the exercise guide and perform the steps in browser
*

=====================================
Part 4: Autoscaling applications
=====================================

3.	Edit the patient-ui Deployment Config by going to template > spec > containers > resources section and replacing {} with the following

resources: 
    limits:
        cpu: 30m 
        memory: 100Mi
    requests: cpu: 3m
        memory: 10Mi

4.	Verify the new version of ReplicationController that is created by running the following command:
oc get event | grep replicationcontroller

5. Create a horizontal pod auto-scaler by running the following command: 
oc autoscale --min=1 --max=10 --cpu-percent=1 dc/patient-ui

6.	In a separate session, run the following commands to generate a workload:
route=$(oc get route | grep patient-ui | awk '{print $2}')
while sleep 1; do curl -s http://$route/info; done

7.	Go back to the first IBM Cloud Shell session and run the following command:
watch oc get po

8.	Press Ctrl+c to exit the watch command and run the following command to see the events that are related to scaling:
oc get events | grep -i scaled

9.	Go back to the second IBM Cloud Shell session and press Ctrl+c to exit the cURL loop. Wait a few minutes, and then go back to first IBM Cloud Shell session and run the following command:
oc get events | grep -i scaled


=====================================
Part 5: Integrating Red Hat OpenShift with Cloudant
=====================================
*
* Follow the exercise guide and perform the steps 1 to 4 in browser
*
5.	Go back to the IBM Cloud Shell and make sure that you are in the project example-health:
oc project example-health

6.	Run the following command to create the Node.js Patient Database App:
oc new-app --name=patient-db centos/nodejs-10-centos7~https://github.com/IBM-SkillsAcademy/OpenShiftDevOps2020.git --context-dir nodejs-patientdb-cloudant

* Follow the exercise guide and perform the remaining steps browser


=====================================
Part 6: Integrating Red Hat OpenShift and IBM Cloud Logging with LogDNA
=====================================
*
* Follow the exercise guide and perform the steps 1 to 5 in browser
*

6a. oc new-project ibm-observe

6b. oc create serviceaccount logdna-agent -n ibm-observe

6c. oc adm policy add-scc-to-user privileged system:serviceaccount:ibm-observe:logdna-agent

6d. oc create secret generic logdna-agent-key --from-literal=logdna-agent-key=<key value> -n ibm-observe

6e. oc create -f https://assets.us-south.logging.cloud.ibm.com/clients/logdna-agent-ds-os.yaml -n ibm-observe

7.	Verify DaemonSet and pods by running the following command:
oc get all -n ibm-observe

* Follow the exercise guide and perform the remaining steps browser


=====================================
Clean-up Procedure
=====================================
a.	Clean up the example health application by running the following command
oc delete project example-health
 
b. Clean up the ibm-observe project that was created for the logging and monitoring agents by running the following command in IBM Cloud Shell:
oc delete project ibm-observe

c. Go back to the IBM Cloud web console and delete the Cloudant, and IBM Cloud Log Analysis with LogDNA,  services that were created in parts 5, 6, and 7.
