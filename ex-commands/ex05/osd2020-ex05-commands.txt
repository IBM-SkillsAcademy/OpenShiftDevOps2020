# Login with developer to crc
oc login -u developer -p developer https://api.crc.testing:6443

# Create projects for DEV,TEST,PROD
$ export GUID=health-ui
$ oc new-project pipeline-${GUID}-dev --description="Health UI Development Environment" --display-name="Health UI- Dev"
$ oc new-project pipeline-${GUID}-test --description="Health UI Testing Environment" --display-name="Health UI - Test"
$ oc new-project pipeline-${GUID}-prod --description="Health UI Production Environment" --display-name="Health UI - Prod"

# This is a test command reference file for Exercise - 5 in the Red Hat OpenShift DevOps Engineer course 2020

oc new-project yourproject-cicd --display-name="My CICD Project"

oc new-app jenkins-persistent --param MEMORY_LIMIT=2Gi --param DISABLE_ADMINISTRATIVE_MONITORS=true --param ENABLE_OAUTH=true
oc set resources dc jenkins --limits=cpu=2 --requests=cpu=1,memory=2Gi

watch oc get pod

oc get route jenkins -o jsonpath='{.spec.host}{"\n"}'

# Create projects for environments : DEV,TEST, PROD

$ export GUID=health-ui
$ oc new-project pipeline-${GUID}-dev --description="Health UI Development Environment" --display-name="Health UI- Dev"
$ oc new-project pipeline-${GUID}-test --description="Health UI Testing Environment" --display-name="Health UI - Test"
$ oc new-project pipeline-${GUID}-prod --description="Health UI Production Environment" --display-name="Health UI - Prod"

$ oc get projects

$ oc project pipeline-${GUID}-dev

$ oc new-app jenkins-persistent -p ENABLE_OAUTH=true -n pipeline-${GUID}-dev

# Enable the Jenkins service account to manage resources in the pipeline-${GUID}-test and pipeline-${GUID}-prod projects:
$ oc policy add-role-to-user edit system:serviceaccount:pipeline-${GUID}-dev:jenkins -n pipeline-${GUID}-test
$ oc policy add-role-to-user edit system:serviceaccount:pipeline-${GUID}-dev:jenkins -n pipeline-${GUID}-prod

# Enable pulling of images from the pipeline-${GUID}-dev project to the pipeline-${GUID}-test and pipeline-${GUID}-prod projects:
$ oc policy add-role-to-group system:image-puller system:serviceaccounts:pipeline-${GUID}-test -n pipeline-${GUID}-dev
$ oc policy add-role-to-group system:image-puller system:serviceaccounts:pipeline-${GUID}-prod -n pipeline-${GUID}-dev

# Deploy the "Cat of The Day" (cotd) application in the pipeline-${GUID}-dev project:
$ oc new-app nodejs~https://github.com/svennam92/node-s2i-openshift -n pipeline-${GUID}-dev

# Watch the build logs until the build is complete:
$ oc logs -f build/node-s2i-openshift-1 -n pipeline-${GUID}-dev

# Verify that the build completed and tag the image:
$ oc tag node-s2i-openshift:latest node-s2i-openshift:testready -n pipeline-${GUID}-dev
$ oc tag node-s2i-openshift:testready node-s2i-openshift:prodready -n pipeline-${GUID}-dev

# Examine the image stream to verify that the tags were created:
$ oc describe is node-s2i-openshift -n pipeline-${GUID}-dev

# Deploy the node-s2i-openshift application in the pipeline-${GUID}-test and pipeline-${GUID}-prod projects:
$ oc new-app pipeline-${GUID}-dev/node-s2i-openshift:testready --name=node-s2i-openshift -n pipeline-${GUID}-test
$ oc new-app pipeline-${GUID}-dev/node-s2i-openshift:prodready --name=node-s2i-openshift -n pipeline-${GUID}-prod

# Create routes for all three of the applications:
$ oc expose service node-s2i-openshift -n pipeline-${GUID}-dev
$ oc expose service node-s2i-openshift -n pipeline-${GUID}-test
$ oc expose service node-s2i-openshift -n pipeline-${GUID}-prod

# Disable automatic deployment for all of the deployment configurations in your demonstration:
$ oc get dc cotd2 -o yaml -n pipeline-${GUID}-dev | sed 's/automatic: true/automatic: false/g' | oc replace -f -
$ oc get dc cotd2 -o yaml -n pipeline-${GUID}-test | sed 's/automatic: true/automatic: false/g' | oc replace -f -
$ oc get dc cotd2 -o yaml -n pipeline-${GUID}-prod | sed 's/automatic: true/automatic: false/g' | oc replace -f -





